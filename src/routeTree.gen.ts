/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as OperatorsImport } from './routes/operators'
import { Route as NotificationsImport } from './routes/notifications'
import { Route as ImportImport } from './routes/import'
import { Route as CargoImport } from './routes/cargo'
import { Route as BookingImport } from './routes/booking'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const OperatorsRoute = OperatorsImport.update({
  id: '/operators',
  path: '/operators',
  getParentRoute: () => rootRoute,
} as any)

const NotificationsRoute = NotificationsImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => rootRoute,
} as any)

const ImportRoute = ImportImport.update({
  id: '/import',
  path: '/import',
  getParentRoute: () => rootRoute,
} as any)

const CargoRoute = CargoImport.update({
  id: '/cargo',
  path: '/cargo',
  getParentRoute: () => rootRoute,
} as any)

const BookingRoute = BookingImport.update({
  id: '/booking',
  path: '/booking',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/booking': {
      id: '/booking'
      path: '/booking'
      fullPath: '/booking'
      preLoaderRoute: typeof BookingImport
      parentRoute: typeof rootRoute
    }
    '/cargo': {
      id: '/cargo'
      path: '/cargo'
      fullPath: '/cargo'
      preLoaderRoute: typeof CargoImport
      parentRoute: typeof rootRoute
    }
    '/import': {
      id: '/import'
      path: '/import'
      fullPath: '/import'
      preLoaderRoute: typeof ImportImport
      parentRoute: typeof rootRoute
    }
    '/notifications': {
      id: '/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsImport
      parentRoute: typeof rootRoute
    }
    '/operators': {
      id: '/operators'
      path: '/operators'
      fullPath: '/operators'
      preLoaderRoute: typeof OperatorsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/booking': typeof BookingRoute
  '/cargo': typeof CargoRoute
  '/import': typeof ImportRoute
  '/notifications': typeof NotificationsRoute
  '/operators': typeof OperatorsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/booking': typeof BookingRoute
  '/cargo': typeof CargoRoute
  '/import': typeof ImportRoute
  '/notifications': typeof NotificationsRoute
  '/operators': typeof OperatorsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/booking': typeof BookingRoute
  '/cargo': typeof CargoRoute
  '/import': typeof ImportRoute
  '/notifications': typeof NotificationsRoute
  '/operators': typeof OperatorsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/booking'
    | '/cargo'
    | '/import'
    | '/notifications'
    | '/operators'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/booking' | '/cargo' | '/import' | '/notifications' | '/operators'
  id:
    | '__root__'
    | '/'
    | '/booking'
    | '/cargo'
    | '/import'
    | '/notifications'
    | '/operators'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BookingRoute: typeof BookingRoute
  CargoRoute: typeof CargoRoute
  ImportRoute: typeof ImportRoute
  NotificationsRoute: typeof NotificationsRoute
  OperatorsRoute: typeof OperatorsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BookingRoute: BookingRoute,
  CargoRoute: CargoRoute,
  ImportRoute: ImportRoute,
  NotificationsRoute: NotificationsRoute,
  OperatorsRoute: OperatorsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/booking",
        "/cargo",
        "/import",
        "/notifications",
        "/operators"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/booking": {
      "filePath": "booking.tsx"
    },
    "/cargo": {
      "filePath": "cargo.tsx"
    },
    "/import": {
      "filePath": "import.tsx"
    },
    "/notifications": {
      "filePath": "notifications.tsx"
    },
    "/operators": {
      "filePath": "operators.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
